# -------- Build Stage --------
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
WORKDIR /source

# Copy everything and restore
COPY . .
RUN dotnet restore "./ServiceDelivery.ProfileService.csproj"

# Ensure the certificate is included (mark it in .csproj too)
RUN dotnet publish "./ServiceDelivery.ProfileService.csproj" -c Release -o /app --no-restore

# -------- Final Stage --------
FROM mcr.microsoft.com/dotnet/aspnet:9.0
WORKDIR /app

# Install OpenSSL for cert generation
RUN apt-get update && apt-get install -y openssl

# Copy entrypoint (cert generation + app start)
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Copy published app from build stage
COPY --from=build /app .

# Expose HTTPS and HTTP ports
EXPOSE 443 80

# Run startup script (which generates cert and launches app)
ENTRYPOINT ["/entrypoint.sh"]
# ENTRYPOINT ["dotnet", "ServiceDelivery.ProfileService.dll"]

# Copy startup script
# COPY run-with-ngrok.sh .

# Make script executable
# RUN chmod +x run-with-ngrok.sh

# Entry point: run your script
# ENTRYPOINT ["./run-with-ngrok.sh"]

# docker run --rm \
#   -e ASPNETCORE_Kestrel__Certificates__Default__Path=Infrastructure/Resources/https/profile-service.pfx \
#   -e ASPNETCORE_Kestrel__Certificates__Default__Password=profile-service \
#   -p 5501:5501 \
#   -v $(pwd)/certs:/https \
#   odi-ps
