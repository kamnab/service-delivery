@inject IJSRuntime JS
@inject NetworkStatusService NetworkStatusService

@if (!string.IsNullOrEmpty(_message))
{
    <div class="network-toast @(_isOnline ? "online" : "offline")">
        @_message
    </div>
}

@code {
    private string? _message;
    private bool _isOnline;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get initial network status without triggering a toast
            _isOnline = await JS.InvokeAsync<bool>("networkStatusInterop.getOnlineStatus");
            await NetworkStatusService.SetOnlineStatus(_isOnline);

            // Subscribe to status change and toast events
            NetworkStatusService.OnStatusChanged += ShowToast;
            NetworkStatusService.OnShowToast += ShowToast; // Ensure ShowToast is subscribed


            // Start listening for network changes
            await JS.InvokeVoidAsync("networkStatusInterop.init", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task SetNetworkStatus(bool isOnline)
    {
        await NetworkStatusService.SetOnlineStatus(isOnline);
    }

    public async Task ShowToast()
    {
        _isOnline = NetworkStatusService.IsOnline;
        _message = _isOnline ? "✅ You are back online!" : "⚠️ You are offline.";
        StateHasChanged(); // Refresh UI

        await Task.Delay(2000); // Show the message for 2 seconds
        _message = null;
        StateHasChanged(); // Refresh UI again to hide the message
    }

    // Ensure proper cleanup of event subscriptions
    public void Dispose()
    {
        // Unsubscribe from the event to avoid memory leaks
        NetworkStatusService.OnShowToast -= ShowToast;
        NetworkStatusService.OnStatusChanged -= ShowToast;
    }
}
