@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@implements IDisposable

@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject NetworkStatusService NetworkStatusService
@inject IJSRuntime JS

@if (isLoading)
{
    <text>...</text>
}
else if (isAuthenticated)
{
    <a href="authentication/profile">Hello, @displayName!</a>
    <button class="nav-link btn btn-link" @onclick="BeginSignOut">Log out</button>
}
else
{
    <button class="nav-link btn btn-link" @onclick="Login">Log in</button>
}

@code {
    private bool isAuthenticated;
    private bool isLoading = true;
    private string? displayName;
    private ClaimsPrincipal user;
    protected override async Task OnInitializedAsync()
    {
        AuthProvider.AuthenticationStateChanged += OnAuthStateChanged;
        await UpdateAuthState();
    }

    private void SetAuthStateFromUser(ClaimsPrincipal principal)
    {
        user = principal;
        isAuthenticated = user.Identity?.IsAuthenticated == true;
        displayName =
        user?.FindFirst("display_name")?.Value ??
        user?.Identity?.Name ??
        "Guest";
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        var state = await task;
        SetAuthStateFromUser(state.User);
#if DEBUG
Console.WriteLine($"[Auth] State changed: {isAuthenticated}, {user.Identity?.Name}");
#endif
        StateHasChanged();
    }

    private async Task UpdateAuthState()
    {
        var json = await JS.InvokeAsync<string>("sessionStorage.getItem", "oidc.user:https://localhost:44313/:sdc-v1");
        if (!string.IsNullOrWhiteSpace(json))
        {
            // Update UI
            // Trigger authentication state change
            var parsed = JsonDocument.Parse(json);
            var idToken = parsed.RootElement.GetProperty("id_token").GetString();
#if DEBUG
Console.WriteLine("idToken: ", idToken);
#endif
            var cachedUser = IdentityBuilder.BuildIdentityFromIdToken(idToken, "cached");
            SetAuthStateFromUser(new ClaimsPrincipal(cachedUser));
        }
        else
        {
            @* var authState = await AuthProvider.GetAuthenticationStateAsync();
            SetAuthStateFromUser(authState.User); *@
        }

#if DEBUG
Console.WriteLine($"[Auth] IsAuthenticated: {isAuthenticated}, User: {user?.Identity?.Name}");
#endif

        isLoading = false;
        StateHasChanged();
    }

    private async Task BeginSignOut()
    {
        if (!NetworkStatusService.IsOnline)
        {
            await NetworkStatusService.ShowToast("Logout queued. It will be processed when online.");
            return;
        }

        Navigation.NavigateToLogout("authentication/logout");
    }

    private async Task Login()
    {
        if (!NetworkStatusService.IsOnline)
        {
            await NetworkStatusService.ShowToast("You're offline. Please connect to the internet to log in.");
            return;
        }

        Navigation.NavigateTo("authentication/login");
    }

    public void Dispose()
    {
        AuthProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}