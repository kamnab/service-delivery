@page "/user"
@attribute [Authorize]
@using System.Text.Json
@using System.Security.Claims
@using System.Text
@inject IAccessTokenProvider AuthorizationService

<h1>@AuthenticatedUser?.Identity?.Name</h1>

<h2>Claims</h2>

@foreach (var claim in AuthenticatedUser?.Claims ?? Array.Empty<Claim>())
{
    <p class="claim">@(claim.Type): @claim.Value</p>
}

<h2>Access token</h2>

<p id="access-token" style="white-space: text-break;">@AccessToken?.Value</p>

<h2>Access token claims</h2>

@foreach (var claim in GetAccessTokenClaims())
{
    <p>@(claim.Key): @claim.Value.ToString()</p>
}

@if (AccessToken != null)
{
    <h2>Access token expires</h2>

    <p>Current time: <span id="current-time">@DateTimeOffset.UtcNow</span></p>
    <p id="access-token-expires">@AccessToken.Expires</p>

    <h2>Access token granted scopes (as reported by the API)</h2>

    @foreach (var scope in AccessToken.GrantedScopes)
    {
        <p>Scope: @scope</p>
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    public ClaimsPrincipal AuthenticatedUser { get; set; }
    public AccessToken AccessToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var state = await AuthenticationState;
        var accessTokenResult = await AuthorizationService.RequestAccessToken();

        if (!accessTokenResult.TryGetToken(out var token))
        {
            throw new InvalidOperationException(
            "Failed to provision the access token.");
        }

        AccessToken = token;

        AuthenticatedUser = state.User;
    }

    protected IDictionary<string, object> GetAccessTokenClaims()
    {
        try
        {
            if (AccessToken == null)
                return new Dictionary<string, object>();

            var parts = AccessToken.Value.Split('.');
            if (parts.Length != 3)
                throw new InvalidOperationException("Invalid JWT format");

            var payload = parts[1];
            var padded = payload.PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');
            var base64 = padded.Replace('-', '+').Replace('_', '/');

            var jsonBytes = Convert.FromBase64String(base64);
            var json = Encoding.UTF8.GetString(jsonBytes);

            Console.WriteLine($"Decoded JWT JSON payload: {json}");

            return JsonSerializer.Deserialize<IDictionary<string, object>>(json);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error parsing access token claims: {ex}");
            return new Dictionary<string, object>
            {
                ["error"] = "Failed to parse access token claims",
                ["details"] = ex.Message
            };
        }
    }


}